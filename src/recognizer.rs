use std::cell::RefCell;
use std::mem;

/// Sandbox реализация процесса распознавания
/// ***
/// Отличие sandbox реализации от реальной:
/// * Номера хранятся в буфере ограниченного размера,
/// при переполнении предыдущие номера удаляются
/// * Номера постоянно поступают в буфер из асинхронной задачи
/// * Номера поступают по мере распознавания, по одному
#[derive(Debug, Default, Clone)]
pub struct Recognizer {
	/// Список распознанных номеров
	vrms: RefCell<Vec<String>>,
}

impl Recognizer {
	/// Имитирует добавление номера в буфер из SDK
	pub fn add_vrm(&self, vrm: impl Into<String>) {
		self.vrms.borrow_mut().push(vrm.into());
	}

	/// Извлекает номера из буфера, при этом опустошая буфер.
	/// В реальной реализации это работает примерно также,
	/// за исключением некоторых требований синхронизации,
	/// из-за того что sdk работает в другом потоке
	pub fn flush(&self) -> Vec<String> {
		mem::take(&mut *self.vrms.borrow_mut())
	}
}
